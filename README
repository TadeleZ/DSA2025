
College of Informatics
Department of Computer Science
Datastructure and Algorithm 


Group Membersâ€™  Names           			                ID                              
Mulugeta  Addis 				                        	GUR/02030/15	        
Tadele Endalsey	      		                      GUR/02115/15       
Tamrat Birhanu                 			              GUR/01963/15 	        
Abel  Kifle				                                GUR/02225/15              
Solomon Aemiro           			                    GUR/02089/15 



### Documentation for GraphTraversalVisualizer

The `GraphTraversalVisualizer` class is a C++ implementation of a graph data structure with functionalities for adding, deleting, and traversing nodes and edges. It supports both Breadth-First Search (BFS) and Depth-First Search (DFS) traversals, as well as finding the shortest path using Dijkstra's algorithm. Below is a brief overview of its features and methods.

---

### **Class Overview**

#### **Data Members**
1. **`adjList[MAX_NODES][MAX_NODES]`**:
   - Adjacency matrix to represent the graph.
   - `-1` indicates no edge between two nodes.

2. **`weights[MAX_NODES][MAX_NODES]`**:
   - Matrix to store the weights of edges between nodes.

3. **`exists[MAX_NODES]`**:
   - Boolean array to track whether a node exists in the graph.

---

### **Methods**

#### **Graph Management**
1. **`addNode(int node)`**:
   - Adds a new node to the graph if it doesn't already exist and is within bounds.
   - **Input**: Node number.
   - **Output**: Confirmation message.

2. **`deleteNode(int node)`**:
   - Deletes a node and removes all edges connected to it.
   - **Input**: Node number.
   - **Output**: Confirmation message.

3. **`addEdge(int src, int dest, int weight)`**:
   - Adds a directed edge between two nodes with a specified weight.
   - **Input**: Source node, destination node, and edge weight.
   - **Output**: Confirmation message.

4. **`updateWeight(int src, int dest, int newWeight)`**:
   - Updates the weight of an existing edge between two nodes.
   - **Input**: Source node, destination node, and new weight.
   - **Output**: Confirmation message.

5. **`printGraph()`**:
   - Prints the graph's adjacency list representation, including edge weights.
   - **Output**: Graph structure.

---

#### **Traversal Algorithms**
1. **`bfs(int startNode)`**:
   - Performs Breadth-First Search starting from the given node.
   - **Input**: Start node.
   - **Output**: BFS traversal order.

2. **`dfs(int startNode)`**:
   - Performs Depth-First Search starting from the given node.
   - **Input**: Start node.
   - **Output**: DFS traversal order.

---

#### **Shortest Path**
1. **`showShortestPath(int startNode, int endNode)`**:
   - Finds the shortest path between two nodes using Dijkstra's algorithm.
   - **Input**: Start node and destination node.
   - **Output**: Shortest path and total distance. If no path exists, an appropriate message is displayed.

---

### **Main Menu Functionality**
The program provides a menu-driven interface for interacting with the graph. Users can:
1. Add or delete nodes.
2. Add or update edges.
3. Perform BFS and DFS traversals.
4. Find the shortest path between two nodes.
5. Print the graph's structure.
6. Exit the program.

---

### **Key Features**
- **Dynamic Graph Manipulation**: Nodes and edges can be added, deleted, or updated dynamically.
- **Traversal Visualization**: BFS and DFS traversals are implemented iteratively for clarity.
- **Shortest Path Calculation**: Implements Dijkstra's algorithm to compute the shortest path.
- **Error Handling**: Ensures invalid inputs (e.g., non-existent nodes) are handled gracefully.

---

### **Usage Example**
1. Add nodes: `addNode(0)`, `addNode(1)`.
2. Add edges: `addEdge(0, 1, 5)`.
3. Perform BFS: `bfs(0)`.
4. Find shortest path: `showShortestPath(0, 1)`

This implementation is suitable for educational purposes and small-scale graph operations. For larger graphs, consider using adjacency lists instead of adjacency matrices for better memory efficiency.
